{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","addTodo","useState","id","task","completed","todo","setTodo","onSubmit","e","preventDefault","trim","uuidv4","TextField","label","name","type","value","onChange","target","Button","Todo","toggleComplete","removeTodo","ListItem","style","display","Checkbox","checked","onClick","Typography","variant","textDecoration","IconButton","TodoList","todos","List","map","key","App","setTodos","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","className","padding","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8TAuCeA,MAnCf,YAAgC,IAAZC,EAAW,EAAXA,QAAW,EACLC,mBAAS,CAC/BC,GAAI,GACJC,KAAM,GACNC,WAAW,IAJgB,mBACtBC,EADsB,KAChBC,EADgB,KAqB7B,OACE,0BAAMC,SAXR,SAAsBC,GACpBA,EAAEC,iBAEEJ,EAAKF,KAAKO,SACZV,EAAQ,2BAAKK,GAAN,IAAYH,GAAIS,iBAEvBL,EAAQ,2BAAKD,GAAN,IAAYF,KAAM,SAMzB,kBAACS,EAAA,EAAD,CACEC,MAAM,OACNC,KAAK,OACLC,KAAK,OACLC,MAAOX,EAAKF,KACZc,SArBN,SAA+BT,GAC7BF,EAAQ,2BAAKD,GAAN,IAAYF,KAAMK,EAAEU,OAAOF,YAsBhC,kBAACG,EAAA,EAAD,CAAQJ,KAAK,UAAb,Y,qDCHSK,MA3Bf,YAAqD,IAArCf,EAAoC,EAApCA,KAAMgB,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,WASpC,OACE,kBAACC,EAAA,EAAD,CAAUC,MAAO,CAAEC,QAAS,SAC1B,kBAACC,EAAA,EAAD,CAAUC,QAAStB,EAAKD,UAAWwB,QAVvC,WACEP,EAAehB,EAAKH,OAUlB,kBAAC2B,EAAA,EAAD,CACEC,QAAQ,QACRN,MAAO,CACLO,eAAgB1B,EAAKD,UAAY,eAAiB,OAGnDC,EAAKF,MAER,kBAAC6B,EAAA,EAAD,CAAYJ,QAfhB,WACEN,EAAWjB,EAAKH,MAeZ,kBAAC,IAAD,SCNO+B,MAff,YAA0D,IAAtCC,EAAqC,EAArCA,MAAOb,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,WACzC,OACE,kBAACa,EAAA,EAAD,KACGD,EAAME,KAAI,SAAC/B,GAAD,OACT,kBAAC,EAAD,CACEgC,IAAKhC,EAAKH,GACVG,KAAMA,EACNiB,WAAYA,EACZD,eAAgBA,SCiDXiB,MArDf,WAAgB,IAAD,EACarC,mBAAS,IADtB,mBACNiC,EADM,KACCK,EADD,KAsCb,OAnCAC,qBAAU,WAER,IAAMC,EAAeC,KAAKC,MAAMC,aAAaC,QAPvB,0BAQlBJ,GACFF,EAASE,KAEV,IAEHD,qBAAU,WACRI,aAAaE,QAdS,wBAckBJ,KAAKK,UAAUb,MACtD,CAACA,IA0BF,yBAAKc,UAAU,OACb,kBAACnB,EAAA,EAAD,CAAYL,MAAO,CAAEyB,QAAS,IAAMnB,QAAQ,MAA5C,aAGA,kBAAC,EAAD,CAAU9B,QA5Bd,SAAiBK,GAEfkC,EAAS,CAAClC,GAAF,mBAAW6B,QA2BjB,kBAAC,EAAD,CACEA,MAAOA,EACPb,eA1BN,SAAwBnB,GACtBqC,EACEL,EAAME,KAAI,SAAC/B,GACT,OAAIA,EAAKH,KAAOA,EACP,2BACFG,GADL,IAEED,WAAYC,EAAKD,YAGdC,OAkBPiB,WAbN,SAAoBpB,GAClBqC,EAASL,EAAMgB,QAAO,SAAC7C,GAAD,OAAUA,EAAKH,KAAOA,WC/B5BiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5976f4d1.chunk.js","sourcesContent":["import { Button, TextField } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction TodoForm({ addTodo }) {\n  const [todo, setTodo] = useState({\n    id: '',\n    task: '',\n    completed: false,\n  });\n\n  function handleTaskInputChange(e) {\n    setTodo({ ...todo, task: e.target.value });\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    // trim() gets rid of string whitespace\n    if (todo.task.trim()) {\n      addTodo({ ...todo, id: uuidv4() });\n      // reset task input\n      setTodo({ ...todo, task: '' });\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <TextField\n        label=\"Task\"\n        name=\"task\"\n        type=\"text\"\n        value={todo.task}\n        onChange={handleTaskInputChange}\n      />\n      <Button type=\"submit\">submit</Button>\n    </form>\n  );\n}\n\nexport default TodoForm;\n","import { Checkbox, IconButton, ListItem, Typography } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport React from 'react';\n\nfunction Todo({ todo, toggleComplete, removeTodo }) {\n  function handleCheckboxClick() {\n    toggleComplete(todo.id);\n  }\n\n  function handleRemoveClick() {\n    removeTodo(todo.id);\n  }\n\n  return (\n    <ListItem style={{ display: 'flex' }}>\n      <Checkbox checked={todo.completed} onClick={handleCheckboxClick} />\n      <Typography\n        variant=\"body1\"\n        style={{\n          textDecoration: todo.completed ? 'line-through' : null,\n        }}\n      >\n        {todo.task}\n      </Typography>\n      <IconButton onClick={handleRemoveClick}>\n        <CloseIcon />\n      </IconButton>\n    </ListItem>\n  );\n}\n\nexport default Todo;\n","import { List } from '@material-ui/core';\nimport React from 'react';\nimport Todo from './Todo';\n\nfunction TodoList({ todos, toggleComplete, removeTodo }) {\n  return (\n    <List>\n      {todos.map((todo) => (\n        <Todo\n          key={todo.id}\n          todo={todo}\n          removeTodo={removeTodo}\n          toggleComplete={toggleComplete}\n        />\n      ))}\n    </List>\n  );\n}\n\nexport default TodoList;\n","import Typography from '@material-ui/core/Typography';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\n\nconst LOCAL_STORAGE_KEY = 'react-todo-list-todos';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    // fires when app component mounts to the DOM\n    const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storageTodos) {\n      setTodos(storageTodos);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos]);\n\n  function addTodo(todo) {\n    // adds new todo to beginning of todos array\n    setTodos([todo, ...todos]);\n  }\n\n  function toggleComplete(id) {\n    setTodos(\n      todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n        return todo;\n      })\n    );\n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  }\n\n  return (\n    <div className=\"App\">\n      <Typography style={{ padding: 16 }} variant=\"h1\">\n        Todo List\n      </Typography>\n      <TodoForm addTodo={addTodo} />\n      <TodoList\n        todos={todos}\n        toggleComplete={toggleComplete}\n        removeTodo={removeTodo}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}